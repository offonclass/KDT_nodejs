<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Document</title>
        <script src="/socket.io/socket.io.js"></script>
        <style>
            #chat {
                width: 100%;
                height: 70vh;
                position: relative;
                background-color: skyblue;
            }
            #chat-form {
                position: absolute;
                bottom: 0px;
                display: flex;
                width: 100%;
                justify-content: space-between;
            }
            #chat-form input {
                width: 90%;
            }
            #chat-form button {
                width: 10%;
            }
            .my-chat {
                display: flex;
                justify-content: end;
                padding: 2px;
            }
            .my-chat p {
                background-color: yellow;
                margin: 0px;
                padding: 5px 10px;
                border-radius: 20px;
            }
            .other-chat {
                display: flex;
                justify-content: start;
                padding: 2px;
            }
            .other-chat p {
                background-color: white;
                margin: 0px;
                padding: 5px 10px;
                border-radius: 20px;
            }
            #notice {
                display: flex;
                flex-direction: column;
                text-align: center;
                margin-bottom: 15px;
                color: gray;
            }
            #notice p {
                margin: 0;
            }
            .secret-chat p {
                background-color: pink;
            }
        </style>
    </head>
    <body>
        <h3>채팅방</h3>
        <div id="room">
            <form id="room-form">
                <input type="text" id="userName" placeholder="사용자 이름 입력" />
                <input type="text" id="roomName" placeholder="채팅방 만들기" />
                <button>입장</button>
            </form>
            <ul id="room-list"></ul>
        </div>
        <div id="chat" hidden>
            <div id="message">
                <div id="notice"></div>
            </div>
            <form id="chat-form">
                <select id="userList"></select>
                <input type="text" id="chat-message" placeholder="메세지 입력" />
                <button>입력</button>
            </form>
        </div>
        <script>
            const socket = io();
            const roomForm = document.querySelector('#room-form');
            const chatForm = document.querySelector('#chat-form');
            const notice = document.querySelector('#notice');
            const message = document.querySelector('#message');

            let clientName = '';

            //폼이벤트
            //채팅 이벤트
            chatForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const msg = chatForm.querySelector('#chat-message');
                const user = chatForm.querySelector('#userList');
                socket.emit('sendMessage', { message: msg.value, user: clientName, select: user.value });
                msg.value = '';
            });
            //사용자와 채팅룸을 생성하거나 조인하는 이벤트
            roomForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const roomName = roomForm.querySelector('#roomName').value;
                const userName = roomForm.querySelector('#userName').value;

                if (roomName === '' || userName === '') {
                    alert('방이름과 닉네임을 적어주세요');
                    return;
                }

                socket.emit('create', { roomName, userName });
                const room = document.querySelector('#room');
                const chat = document.querySelector('#chat');
                room.hidden = true;
                chat.hidden = false;
                //전역변수 clientName에 이곳에서 입력한 닉네임 저장
                clientName = userName;
            });

            //소켓이벤트
            socket.on('notice', (arg) => {
                console.log(arg);
                const p = document.createElement('p');
                p.textContent = arg;
                notice.appendChild(p);
            });
            socket.on('roomList', (arg) => {
                const roomList = document.querySelector('#room-list');
                roomList.textContent = '';
                console.log('roomList', arg);
                arg.forEach((room) => {
                    const li = document.createElement('li');
                    li.textContent = room;
                    roomList.appendChild(li);
                });
            });
            //채팅메세지를 출력하는 이벤트
            socket.on('newMessage', (arg) => {
                const { message: msg, user, dm } = arg;
                const div = document.createElement('div');
                const p = document.createElement('p');
                if (clientName === user) {
                    //내가 입력한 채팅
                    div.classList.add('my-chat');
                } else {
                    //상대방이 입력한 채팅
                    div.classList.add('other-chat');
                }
                if (dm) {
                    div.classList.add('secret-chat')
                }
                p.textContent = dm ? `(속닥속닥) ${user}: ${msg}` : `${user}: ${msg}`;
                div.appendChild(p);
                message.appendChild(div);
            });
            // 접속한 사용자 리스트
            socket.on('userList', (arg) => {
                const lists = document.querySelector('#userList')
                let options = '<option value="all">전체<option>'
                    for(let i of arg) {
                        options += `<option value=${i.key}>${i.userName}</option>`
                    }
                    lists.innerHTML = options;
            })
        </script>
    </body>
</html>
